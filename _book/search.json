[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PSCI 2075 Recitation Handout",
    "section": "",
    "text": "üëã Welcome\n\nHi GIFfrom Hi GIFs\n\n\nI am glad to have you in my recitation sections for PSCI 2075!\nI am looking forward to working together in this class.\nThis document provides a reference guide for you to look back on throughout the semester. This is not a supplement for attending lecture, recitation, or for taking notes. It also is not a study guide. This is simply a reference guide. üìë\nTo find raw example documents, the code used to build this handout, and to notify me of issues, please visit the corresponding Github repository"
  },
  {
    "objectID": "docs/handout.html#recitation-information",
    "href": "docs/handout.html#recitation-information",
    "title": "Recitation Policies",
    "section": "Recitation Information",
    "text": "Recitation Information\n\nSection 011\n\n\n\nInstructor: Damon C. Roberts\nEmail: damon.roberts-1@colorado.edu\n\n\n\nMeeting time: Friday: 10:10-11:00 AM\nMeeting Location: KOBL 140\n\n\n\nOffice hours: Mondays and Thursdays: 12-1 PM\nOffice: Ketchum 382\n\n\n\nGroups:\n\n\n\n\n\n\n\nSection 018\n\n\n\nInstructor: Damon C. Roberts\nEmail: damon.roberts-1@colorado.edu\n\n\n\nMeeting time: Thursday: 10:10-11:00 AM\nMeeting Location: CLRE 302\n\n\n\nOffice hours: Mondays and Thursdays: 12-1 PM\nOffice: Ketchum 382\n\n\n\nGroups:"
  },
  {
    "objectID": "docs/handout.html#purpose-of-a-recitation",
    "href": "docs/handout.html#purpose-of-a-recitation",
    "title": "Recitation Policies",
    "section": "Purpose of a recitation",
    "text": "Purpose of a recitation\nThe purpose of my part in delivering the course for you, as all college courses should be viewed, is not to ‚Äúlose points‚Äù or to earn a grade. üíØ üôÖ‚Äç‚ôÄÔ∏è Rather, I see our journey this semester as a collaborative effort for you to build knowledge to make you a more effective democratic citizen and for me to work with the instructor of record to give you a very small introduction to a potential career path. We provide you with information we think is relevant for this goal and your job is to learn it.\nRecitations meet separately from lecture but are still required. The purpose of a recitation, especially for large classes, is to help you, the student, to have a meeting time separate from lecture that reviews the lecture material and to provide a more in depth conversations. Recitations are a supplement to what you learn in lecture. In the recitation, broadly speaking, we will review and discuss the assigned readings for the class and will clarify any points of confusion from the material covered in the lecture. For this recitation, we will also take a deeper dive into the R code that allows researchers to perform many of these statistical computations we discuss in lecture.\nAs a student üßë‚Äçüéì, your goal for the recitation is to come prepared with questions üôã and, if you have none, to do the work to understand the material. My goal, as the instructor for this recitation üßë‚Äçüè´, is to guide your learning so that you get more in-depth understanding of the material for the class.\nFor many, this is a required class that you are taking to complete your degree and are not interested in the material ü´†. My other goal is to at least introduce and convince you of the complexity of data analysis and the importance of having a basic understanding of the ways in which data analysis is not purely objective ü§Ø.\nThe format of the recitations and the material for the course is determined by the faculty teaching the class. I, however, will do what I can to be flexible to the needs of the students for my recitations to maximize your learning."
  },
  {
    "objectID": "docs/handout.html#contacting-me",
    "href": "docs/handout.html#contacting-me",
    "title": "Recitation Policies",
    "section": "Contacting me ‚úâÔ∏è",
    "text": "Contacting me ‚úâÔ∏è\nYou should feel free to contact me throughout the semester. I encourage you to come to office hours so that I can help answer any questions you have about the course policies, the material covered in the class, any concerns you have, questions about navigating University, offering additional materials if there is a topic you are really interested in, etcetera üôè. You are also welcomed to email me. I am usually responsive to email Monday-Friday from 9 AM ‚Äì 5 PM (I may take a day or two, but I will get back to you). Please do note that email is not instantaneous communication; it is not a text message or a DM üôÖ‚Äç‚ôÄÔ∏è. Despite my best intentions, I receive too many emails and try to manage a decent work-life balance. This means that you if you have questions for me and send them over email, you should be prepared for a response to take a day or two. In other words, do not send me an email right before an assignment is due or some other deadline.\n\nHow to refer to me\nI am a PhD Candidate, which means I have not yet recieved my PhD - but I am in the last stages of the process, so my title is not yet Dr.¬†Roberts. I am the instructor of the recitation, so it is totally appropriate to refer to me as Professor Roberts or Mr.¬†Roberts.\nI go back and forth with this, but I am generally comfortable with students referring to me by my first name - with a caveat. Female faculty and faculty of color face a several barriers in academia. One part of this is that students often treat female faculty and faculty of color as if they have less authority and expertise over their respective subject material. These biases manifest in a number of ways. One common way is that students feel more comfortable referring to their non-white male faculty without an acknowledgement of their titles. Feeling comfortable with students being less formal with me is a reflection of my unearned privilege as a white male.\nBecause I am comfortable with less formal interactions with my students, you should not assume other instructors and faculty are as well. Unless a faculty member explicitly tells you that it is okay to refer to them by their first name, you should only refer to them as Professor LASTNAME. This is a safe option for faculty that may not or may not yet have a PhD where referring to them as Dr.¬†LASTNAME may not be appropriate.\n\n\nStudent hours\nMany faculty call these office hours. I prefer to use the term student hours since it is what they really are. Student hours are designated times I (and all faculty and TA‚Äôs) set aside each week for students to visit me in my office. I will always be in my office during these designated times, so feel free to stop by. These hours are your chance to ask questions about the course material, about university in general, or just to chat so that we can get to know one another. Many students come to student hours after a test wondering what they need to know to prepare for an exam; however, I encourage you to come with questions before the exam. Student hours are most helpful to students if you have done some studying before coming to my office and having concrete questions about material you are struggling with. When you come in with substantive questions about the course material, I can explain a course concept a different way or help you work through a problem."
  },
  {
    "objectID": "docs/handout.html#recitation-policies",
    "href": "docs/handout.html#recitation-policies",
    "title": "Recitation Policies",
    "section": "Recitation policies",
    "text": "Recitation policies\n\n\n\n\n\n\n\nNote\n\n\n\nThese are an elaboration upon what is covered in the syllabus for the course that Dr.¬†Philips provided. They do not override nor provide complete information about the course. You can think of this as an addendum where I can present information about how my recitation sections will operate.\n\n\nIn the first five minutes of each recitation meeting, I will post a question to the board based on that week‚Äôs material (reading or lecture). You will need to submit an answer to that question in those first five minutes. üìù\nThe purpose of the questions are for me to gauge everyone‚Äôs progress with the course. üí™ I do not want my students to fall behind and to slip through the cracks. I want to make sure that if you are struggling, that you are offered opportunities to receive help (should you choose to accept it). These questions will give me a weekly insight into where you are with the material and it gives me a sense of where the group is as a whole. This helps me customize what we focus on in recitation based on the needs of the group.\nSubmission of these questions each week will also help with taking attendance and participation. This encourages you to come to recitation and to come on time (there is not much benefit if you arrive to our recitation meeting with only 10 minutes left). If you submit a response to a question (even if you get it incorrect), you will receive credit for attendance that week. To receive credit for participation that week, a correct (or almost correct) answer to that week‚Äôs question will give you credit for the participation component.\n\n\n\n\n\n\nNote\n\n\n\nPer the policies of the course, you are able to not submit a total of three (3) of these weekly questions before you begin to lose points toward your Attendance & Participation grade. The three misses can be for any reason such as arriving late, not attending class, not answering the question, etc. This means you should use these three misses when you absolutely need them."
  },
  {
    "objectID": "docs/outline.html#week-1",
    "href": "docs/outline.html#week-1",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.1 Week 1",
    "text": "1.1 Week 1\n\nSlides: Week 1 Slides\nRecitation Policies: Recitation Policies\n\nSign up term paper group: Recitation Policies (under recitation information, click on  icon to fill out google sheet)\n\nSetting up R and RStudio: R Setup"
  },
  {
    "objectID": "docs/outline.html#week-2",
    "href": "docs/outline.html#week-2",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.2 Week 2",
    "text": "1.2 Week 2\n\nSlides: Week 2 Slides\nFinalizing groups: Recitation Policies (under recitation information, click on the  icon to fill out google sheet)\nMake sure everyone has R and RStudio set up. R Setup\nGo over the anatomy of RStudio. RStudio Anatomy\nGo over file structure on computers. Computer file structure\nGo over ways to run R code. Writing R code\nGo over basic R syntax. Basic R syntax"
  },
  {
    "objectID": "docs/outline.html#week-3",
    "href": "docs/outline.html#week-3",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.3 Week 3",
    "text": "1.3 Week 3\n\nAttendance\nGo over how to load the datasets for the class. Load data\nGo over describing variables in your data. Descriptive statistics\n(If time) get groups together to work on Group Assignment 1."
  },
  {
    "objectID": "docs/outline.html#week-4",
    "href": "docs/outline.html#week-4",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.4 Week 4",
    "text": "1.4 Week 4"
  },
  {
    "objectID": "docs/outline.html#week-5",
    "href": "docs/outline.html#week-5",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.5 Week 5",
    "text": "1.5 Week 5"
  },
  {
    "objectID": "docs/outline.html#week-6",
    "href": "docs/outline.html#week-6",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.6 Week 6",
    "text": "1.6 Week 6"
  },
  {
    "objectID": "docs/outline.html#week-7",
    "href": "docs/outline.html#week-7",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.7 Week 7",
    "text": "1.7 Week 7"
  },
  {
    "objectID": "docs/outline.html#week-8",
    "href": "docs/outline.html#week-8",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.8 Week 8",
    "text": "1.8 Week 8"
  },
  {
    "objectID": "docs/outline.html#week-9",
    "href": "docs/outline.html#week-9",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.9 Week 9",
    "text": "1.9 Week 9"
  },
  {
    "objectID": "docs/outline.html#week-10",
    "href": "docs/outline.html#week-10",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.10 Week 10",
    "text": "1.10 Week 10"
  },
  {
    "objectID": "docs/outline.html#week-11",
    "href": "docs/outline.html#week-11",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.11 Week 11",
    "text": "1.11 Week 11"
  },
  {
    "objectID": "docs/outline.html#week-12",
    "href": "docs/outline.html#week-12",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.12 Week 12",
    "text": "1.12 Week 12"
  },
  {
    "objectID": "docs/outline.html#week-13",
    "href": "docs/outline.html#week-13",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.13 Week 13",
    "text": "1.13 Week 13"
  },
  {
    "objectID": "docs/outline.html#week-14",
    "href": "docs/outline.html#week-14",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.14 Week 14",
    "text": "1.14 Week 14"
  },
  {
    "objectID": "docs/outline.html#week-15",
    "href": "docs/outline.html#week-15",
    "title": "1¬†  Outline: What we‚Äôve done in recitation",
    "section": "1.15 Week 15",
    "text": "1.15 Week 15"
  },
  {
    "objectID": "docs/01_setup.html#options-for-running-r",
    "href": "docs/01_setup.html#options-for-running-r",
    "title": "2¬† R Setup",
    "section": "2.1 Options for running R",
    "text": "2.1 Options for running R\nR (R Core Team 2021) is a programming language that you need to download onto a computer and you need to have some sort of way to interact with it via an Interactive Development Environment (IDE). RStudio (RStudio Team 2020) is one such IDE; and it is the one we will be using for this course. In other words, you can‚Äôt just download RStudio (RStudio Team 2020) or R (R Core Team 2021). You need to download R (R Core Team 2021) ‚Äì the language ‚Äì and RStudio (RStudio Team 2020) ‚Äì a way to interact with R.\nYou can either download these onto your own computer (locally) üíª or use them from another computer provided by a service (remotely/cloud) ‚òÅÔ∏è.\nThere are pros and cons to each option.\n\nLocally:\n\n‚úÖ Pros:\n\nDo not necessarily need stable internet access\nMore secure in that it is not published out there on the web\nOften have more computational capacity as you are not relying on some server.\n\nü§¢Cons:\n\nRequires access to a laptop or desktop\nSpeed of computations are limited to your computer‚Äôs resources\nUnless you do some fancy stuff like setting up a virtual environment, it can create some clutter on your computer.\n\n\nRemotely:\n\n‚úÖ Pros:\n\nCan use on anything that can connect to the internet\nEverything is set up for you. You do not need to download R or your IDE\nIf you have an older computer or one with lower capacity, can be faster\n\nü§¢Cons:\n\nSometimes requires you to start from scratch each time you use the service. Does not save progress\nFre-tiers are often quite limited in terms of resources made available to you for your computations\n\n\n\n\n\n\n\n\n\nNote\n\n\n\nThe default in this class is to locally install R and to run it with RStudio.\nIf you have a Chromebook or do not have a laptop (i.e.¬†use a Tablet), then you should run R remotely with Posit.Cloud or Google Colaboratory (discussed below)"
  },
  {
    "objectID": "docs/01_setup.html#locally-setting-up-r",
    "href": "docs/01_setup.html#locally-setting-up-r",
    "title": "2¬† R Setup",
    "section": "2.2 üíª Locally setting up R",
    "text": "2.2 üíª Locally setting up R\n\n2.2.1 Downloading R\n\nGo to CRAN to download the base version of the language\nSelect the appropriate version for your Operating System (i.e.¬†Windows, macOS, Linux)\nFollow the standard installation steps for software on your operating system\n\n\n\n2.2.2 Downloading your IDE (RSTUDIO)\nNote: There are other IDE‚Äôs that you can use, but they often require more technical know-how\n\nGo to Posit‚Äôs website to download RStudio\nSkip straight to step 2 (on the website) and Install RStudio Desktop\nFollow the standard install steps"
  },
  {
    "objectID": "docs/01_setup.html#access-r-remotely",
    "href": "docs/01_setup.html#access-r-remotely",
    "title": "2¬† R Setup",
    "section": "2.3 ‚òÅÔ∏è Access R remotely",
    "text": "2.3 ‚òÅÔ∏è Access R remotely\nIf you want to access R (R Core Team 2021) remotely, you‚Äôve got two primary options:\n\nRStudio Cloud (Now called Posit.Cloud)\nGoogle Colaboratory\n\n\n2.3.1 Posit.Cloud\n\nGo to PositCloud\nCreate an account\nAt the top, click New Project and then click Start New RStudio Project\n\n\n\n2.3.2 Google Colaboratory\nNot really recommended. Talk to me if you do want to explore this option.\n\n\n\n\nR Core Team. 2021. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nRStudio Team. 2020. RStudio: Integrated Development Environment for r. Boston, MA: RStudio, PBC. http://www.rstudio.com/."
  },
  {
    "objectID": "docs/02_anatomy.html#main-panel",
    "href": "docs/02_anatomy.html#main-panel",
    "title": "3¬† Anatomy of IDE interface",
    "section": "3.1 Main panel",
    "text": "3.1 Main panel\n\n\n\nMain Panel\n\n\n\nThis is where you will write all of your code.\n\nAs we will talk about in the next section, your code is passed/sent to the console which actually is what evaluates/runs your code.\nHowever, you need to document your code. So you will write a script so that you can save all of the code you wrote. Think of a script as a document outlining the steps you took to perform your analysis.\nYou write your script in this main panel"
  },
  {
    "objectID": "docs/02_anatomy.html#console",
    "href": "docs/02_anatomy.html#console",
    "title": "3¬† Anatomy of IDE interface",
    "section": "3.2 Console",
    "text": "3.2 Console\n\n\n\nConsole\n\n\n\nWhen you run code from a script, you send your code to your R console. This is done by either highlighting your code and using the shortcut ctrl enter ( ‚åò return  on Mac) or hitting the run button at the top of your main panel.\nThe code you write is evaluated and ran by your R console."
  },
  {
    "objectID": "docs/02_anatomy.html#terminal",
    "href": "docs/02_anatomy.html#terminal",
    "title": "3¬† Anatomy of IDE interface",
    "section": "3.3 Terminal",
    "text": "3.3 Terminal\n\n\n\nTerminal\n\n\n\nThe terminal is also an area to run code. This often runs a different coding language (i.e.¬†bash) which is a coding language that tells your computer what to do from a systems standpoint."
  },
  {
    "objectID": "docs/02_anatomy.html#environment",
    "href": "docs/02_anatomy.html#environment",
    "title": "3¬† Anatomy of IDE interface",
    "section": "3.4 Environment",
    "text": "3.4 Environment\n\n\n\nEnvironment\n\n\n\nThe environment displays your cached (temporarily saved) objects that you create with your R code.\n\nWe will elaborate a bit more later on this point.\n\nBut this lets you see things that you‚Äôve temporarily stored from your code."
  },
  {
    "objectID": "docs/02_anatomy.html#files",
    "href": "docs/02_anatomy.html#files",
    "title": "3¬† Anatomy of IDE interface",
    "section": "3.5 Files",
    "text": "3.5 Files\n\n\n\nFiles\n\n\n\nLet‚Äôs you see what files and where you have them on your computer."
  },
  {
    "objectID": "docs/03_file_structure.html#working-directories-and-file-paths",
    "href": "docs/03_file_structure.html#working-directories-and-file-paths",
    "title": "4¬† Computer File Structure",
    "section": "4.1 Working directories and file paths",
    "text": "4.1 Working directories and file paths\nWorking directories refer to the default location that we are working from. For many of us, our working directory is at our particular üìÇ Users folder. So for my computer, it is üìÇ damonroberts.\nWhy do we rely on a default location? Just because it is easier for us, the user, to reference anything relative to the location of our Users üìÇ.\nWhy do we need to know the location of a file? Because we may have a file called psci_2075.pdf somewhere else on our computer. We need to be sure that our computer knows which one we are referring to. To do this, our computer needs to know the file path.\nSo the file path to üìÉ psci_2075.pdf would be:\n\nOn Mac:\n\nUsers/damonroberts/Downloads/psci_2075.pdf\n\nOn Windows:\n\nC:\\Users\\damonroberts\\Downloads\\psci_2075.pdf\n\nOn Linux:\n\nhome/damonroberts/Downloads/psci_2075.pdf\n\n\nNotice how we can essentially follow that file tree down to access our file?\nWhile Windows specifically requires that you specify the hard drive (C:) for your computer at the start, the rest of the information is the same.\nThink of the file name as the specific apartment or house number. The rest of the file path would be information like the Street, City, State, and Zip Code. It provides a precise location as to where you are. If you only gave someone your apartment number to deliver a package, do you think that they would have much luck delivering it to the right apartment? Probably not. Same with accessing files on your computer."
  },
  {
    "objectID": "docs/03_file_structure.html#why-should-i-know-these-things-ive-never-dealt-with-this-before",
    "href": "docs/03_file_structure.html#why-should-i-know-these-things-ive-never-dealt-with-this-before",
    "title": "4¬† Computer File Structure",
    "section": "4.2 Why should I know these things? I‚Äôve never dealt with this before",
    "text": "4.2 Why should I know these things? I‚Äôve never dealt with this before\nIn R, you need to access files through file paths. You can‚Äôt just click on a file to interact with it in R. You need to provide a file path to R so that it knows precisely what file you are talking about on your computer. You will see why this is important later on.\nWhy should I know about working directories? Well, R uses working directories to help make your life easier. Rather than having to write out the entire file path each time you want to interact with a particular file in R, instead you can just write out, in reference to your working directory, where that file is.\nSay that you want to access psci_2075.pdf üìÉ on your computer and your working directory is at your particular Users folder (working directory: /Users/damonroberts/). What would the file path be?\n\n./Downloads/psci_2075.pdf\n\nthe ./ refers to the current working directory\nthe rest refers to where you are relative to the working directory.\n\nOf course you can still access the file by providing the actual file path rather than the relative file path:\n\n/Users/damonroberts/Downloads/psci_2075.pdf"
  },
  {
    "objectID": "docs/03_file_structure.html#creating-a-folder-for-this-class-to-make-your-life-easier",
    "href": "docs/03_file_structure.html#creating-a-folder-for-this-class-to-make-your-life-easier",
    "title": "4¬† Computer File Structure",
    "section": "4.3 Creating a folder for this class to make your life easier",
    "text": "4.3 Creating a folder for this class to make your life easier\n\nOn your desktop, right-click anywhere on your wall paper.\nClick on Create New Folder.\nName that folder psci_2075\n\nThis means that your file tree would look something like this:\n\n\n\n\n\n%%{init: {'theme':'base', 'themeVariables':{'primaryColor':'#ffffff', 'primaryBorderColor': '#000000'}}}%%\n\ngraph TD;\nA[Hard drive] --> B[\"üìÇ Operating System\"];\nA --> C[\"üìÇ Users\"];\nC --> D[\"üìÇ damonroberts\"];\nC --> E[\"üìÇ guest\"];\nD --> F[\"üìÇ Desktop\"];\nD --> G[\"üìÇ Documents\"];\nD --> H[\"üìÇ Downloads\"];\nF --> I[\"üìÇ psci_2075\"];\n\n\n\n\n\nFigure¬†4.4: Course folder"
  },
  {
    "objectID": "docs/03_file_structure.html#finding-your-default-working-directory-in-r",
    "href": "docs/03_file_structure.html#finding-your-default-working-directory-in-r",
    "title": "4¬† Computer File Structure",
    "section": "4.4 Finding your default working directory in R",
    "text": "4.4 Finding your default working directory in R\n\nOpen up RStudio\nIn RStudio, type:\n\n\ngetwd()\n\n\nThis will return your default working directory\nTo change this to your psci_2075 folder, at the top of each .R or .qmd file you write, put:\n\n\nsetwd(\"./Desktop/psci_2075\")\n\n\nNow when you want to reference a file, you do it relative to your psci_2075 üìÇ."
  },
  {
    "objectID": "docs/04_run_code.html#options",
    "href": "docs/04_run_code.html#options",
    "title": "5¬† Running Code",
    "section": "5.1 Options",
    "text": "5.1 Options\nI‚Äôll cover two primary ways that you can execute R (R Core Team 2021) code in RStudio (RStudio Team 2020):\n\nscript (R Core Team 2021) ü´§\nquarto (Allaire et al. 2022) ü§©\n\n\n\n\n\n\n\nNote\n\n\n\nThe default for this class will be to write a script (R Core Team 2021) ‚Äì .R file ‚Äì and then copy and paste results into a Word or Google Doc. ü´§\nThough there are a few extra steps, my preference is quarto (RStudio Team 2020) ‚Äì .qmd, however. ü§© You‚Äôll see why in a second."
  },
  {
    "objectID": "docs/04_run_code.html#script-.r",
    "href": "docs/04_run_code.html#script-.r",
    "title": "5¬† Running Code",
    "section": "5.2 Script (.R) ü´§",
    "text": "5.2 Script (.R) ü´§\n\nA file denoted with the .R file extension\nA file specifically designed to send code to an RStudio (RStudio Team 2020) console.\nOnly allows you to evaluate R (R Core Team 2021) code.\nHave to take the results of your script and place them in a document for your reports/papers/etc."
  },
  {
    "objectID": "docs/04_run_code.html#quarto-.qmd",
    "href": "docs/04_run_code.html#quarto-.qmd",
    "title": "5¬† Running Code",
    "section": "5.3 Quarto (.qmd) ü§©",
    "text": "5.3 Quarto (.qmd) ü§©\n\nA file denoted with the .qmd file extension\nA file that allows you to not only write R code and to evaluate it but it also:\n\nlets you evaluate other coding languages too (e.g., python)\nuses code chunks which evaluates the R code, but also lets you write text around the chunk.\n\nThis is useful if you want to write a paper or report that requires you to evaluate some type of code in it\n\nYou write your code and the other parts of your paper all in the same document üòÆ\nYou render the file and it evaluates the code in your chunks and spits out the result of the code in the document along with your text.\n\nAllows you to compile documents of many different file types\n\ndocuments\n\nHTML\nPDF\nDOCX\n\nslide decks (presentations)\n\nPDF\nPPT\na very pretty and interactive JavaScript\n\nwebsites\nbooks\n\nHMTL\nPDF\n\n\nThis site that you are reading right now was created with .qmd.\nTo set all of this up though, it requires slightly extra work‚Ä¶ üôÄ\n\n\n\n\n\nAllaire, J. J., Charles Teague, Carlos Scheidegger, and Yihui Xie. 2022. Quarto. https://doi.org/10.5281/zenodo.5960048.\n\n\nR Core Team. 2021. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nRStudio Team. 2020. RStudio: Integrated Development Environment for r. Boston, MA: RStudio, PBC. http://www.rstudio.com/."
  },
  {
    "objectID": "docs/05_quarto.html#setup-quarto",
    "href": "docs/05_quarto.html#setup-quarto",
    "title": "6¬† üôÄ Quarto (Optional)",
    "section": "6.1 Setup Quarto",
    "text": "6.1 Setup Quarto\n\nGo to the Quarto website\nInstall Quarto (Allaire et al. 2022) on your computer\nWhere it says Step 2, click on RStudio (RStudio Team 2020).\nRead through their website and look at the tutorials to learn some advanced features about quarto. For basic features, finish reading this chapter."
  },
  {
    "objectID": "docs/05_quarto.html#sec-create-qmd",
    "href": "docs/05_quarto.html#sec-create-qmd",
    "title": "6¬† üôÄ Quarto (Optional)",
    "section": "6.2 Creating a .qmd file",
    "text": "6.2 Creating a .qmd file\n\nIn RStudio (RStudio Team 2020), go to your main panel and click the dropdown button with the piece of paper and green plus sign. Click on Quarto Document‚Ä¶\nThis will bring up a new page giving you some options.\nType in the title of your document\nType in your name for the Author\nClick on the PDF option as you will want to make a PDF document\nLeave the other options and click Create\n\n\n\n\n\n\n\nNote\n\n\n\nTo compile pdf files, you will need to install an additional tool called tinytex (Xie 2019). To do this, go to your terminal (not your console) in RStudio (RStudio Team 2020) and type\n\n\nTerminal\n\nquarto install tools tinytex"
  },
  {
    "objectID": "docs/05_quarto.html#basics-of-quarto",
    "href": "docs/05_quarto.html#basics-of-quarto",
    "title": "6¬† üôÄ Quarto (Optional)",
    "section": "6.3 Basics of Quarto",
    "text": "6.3 Basics of Quarto\n\n6.3.1 yaml section\nThe yaml section of your .qmd file provides high-level information about your document (e.g., title, author, and provides more custom formatting information).\nIf you followed the steps from Section¬†6.2, then you should see the following at the top of your .qmd file:\n---\ntitle: \"Untitled\"\nformat: pdf\neditor: visual\n---\nThis is your yaml section. It is distinguished by --- to let your computer know the start and end of this section.\nThis information is not super useful, let‚Äôs add some extra customization to our yaml section. I am going to include comments denoted by # to let you know what it does.\n---\ntitle: \"PSCI 2075 Quarto Example\" # define a title for the document\nauthor: \"Damon C. Roberts\" # define an author for the document\nformat: # add some custom formatting options. Indent options\n    pdf: # the format of the document is going to be pdf\n        self-contained: true # make sure to delete all the extra files and only keep the .qmd and .pdf once compilation is done\n        colorlinks: true # add color to hyperlinks\n        documentclass: article # make it look like a generic academic article in formatting\nexecute: # when you execute the R code...\n    echo: false #... do not show me the R code\n    warning: false #... do not display warnings from the R code\n    message: false #... do not show messages from the R code\n---\n\n\n6.3.2 Body\nFor non-R code parts of your document, you can write in the .qmd document normally. With a couple of exceptions: - To create a header use #. For subheadings, just add another #. E.g., ## creates a subheader. - To create an unumbered list, just type -; for numbered list just type the numbers. To make sublists, just type:\n- List item 1\n    - Sub list item 1\n1. Numbered list item 1\n2. Numbered list item 2\n\n\n6.3.3 Code Chunks\nIf it weren‚Äôt for R code, I‚Äôd make my life easier and skip all of this by writing all of this in a .docx or a Google Docs file. ü§¶ So let‚Äôs learn how to create a code chunk in a .qmd file. The ability to write your code and text all to display your analyses results along with your interpretation in the same document is where Quarto is powerful. üí™\n```{r}\n#| label: one-plus-one\n1+1\n```\nTo create a code chunk for R, you need to identify a few things:\n\nFirst you need to tell the .qmd file where the code chunk starts and ends. This is done with the accent symbol. You should have six of these in total. Three to designate the start of the code chunk and three at the end of the code chunk.\nAt the start of the code chunk, you need to need to specify which coding language you are evaluating in the code chunk within the brackets ({}). Since we are writing R code, we have {R}\nDirectly underneath the start of the code chunk, you can include some options about what you want to happen with the code chunk. These options are designated with #|. The option you should always specify is the label option. This option names the code chunk: one-plus-one. We do this because when we compile our .qmd file later, it tells us about the progress of our code blocks and can tell us in what code chunk there is an error in our code (which inevitably happens; even to the best of us)\n\nThere are other options that we can specify. But we‚Äôll cover these a bit later.\nOnce we have done that, then we can write our R code. In this case we want to evaluate the expression: \\(1+1\\)\n\n\n\n\n6.3.4 Inline code chunks\nSay we want to evaluate the same expression \\(1+1\\) and display the result in line with our text. We can do that by writing:\nThe result of the expression 1+1 is ```{r} sprintf('%.2f', 1+1)```.\nYou don‚Äôt need to understand all the specifics of what the sprintf('%.2f',) part does. It basically just lets you display some integer value to the hundredth decimal place. The part after the , is the R code we want evaluated. So 1+1 in this case. This all together will print the number 2 instead of you manually typing that in.\nWhy would anyone want to do that to make it more complicated? In the case of \\(1+1\\) that is a pretty simple expression with a pretty simple result. However, as things get more complicated, you may not want to have to do that manually such as calculating the average of some set of data.\n\n\n6.3.5 Non-inline results\nThe inline code chunks are primarily useful for displaying the results of some R code ‚Äúinline‚Äù with the text you are writing. But what if I have a table or a graph of some sort of results I want to display?\nThis is where specifying those other options come in handy.\nSay I write the following R code to generate a graph (we‚Äôll teach you what this R code means later)\n```{r}\n#| label: fig-chart-1\n#| fig-cap: A histogram of Penguin Bill Lengths\n\nggplot() +\n    geom_histogram(data=MY_DATASET, aes(x=bill_length)) +\n    labs(x = \"Bill Lengths\", caption=\"Data Source: Palmer Penguins\") +\n    theme_minimal()\n```\nDon‚Äôt worry about the R code to create the graph for now. What is important to notice about this part is, the options we specified.\n\nWith label I specify that it is going to be a figure with fig- and then finish the name with chart-1\nWith fig-cap I define a title to give the figure.\n\nWhen I compile my document and it evaluates this code block, instead of it displaying the code, it will display the figure.\nIf I want to reference the figure. I can simply type:\n\n@fig-chart-1 displays a histogram of the bill length for the penguins in the Palmer Penguins dataset.\nThis will create a link connecting back to the figure for your reader. Pretty cool!"
  },
  {
    "objectID": "docs/05_quarto.html#more-resources",
    "href": "docs/05_quarto.html#more-resources",
    "title": "6¬† üôÄ Quarto (Optional)",
    "section": "6.4 More resources",
    "text": "6.4 More resources\nIf you are stuck on how to do something in Quarto, want to add something but are not sure how, or want to get more details on it:\n\nyou can find a complete working example of a quarto document (to even use as a template) by copying and pasting the contents of this file\nyou can look at this blog post I wrote on it\nlook at Quarto‚Äôs documentation. This is how I learned Quarto!!\n\n\n\n\n\nAllaire, J. J., Charles Teague, Carlos Scheidegger, and Yihui Xie. 2022. Quarto. https://doi.org/10.5281/zenodo.5960048.\n\n\nR Core Team. 2021. R: A Language and Environment for Statistical Computing. Vienna, Austria: R Foundation for Statistical Computing. https://www.R-project.org/.\n\n\nRStudio Team. 2020. RStudio: Integrated Development Environment for r. Boston, MA: RStudio, PBC. http://www.rstudio.com/.\n\n\nXie, Yihui. 2019. ‚ÄúTinyTeX: A Lightweight, Cross-Platform, and Easy-to-Maintain LaTeX Distribution Based on TeX Live.‚Äù TUGboat 40 (1): 30‚Äì32. https://tug.org/TUGboat/Contents/contents40-1.html."
  },
  {
    "objectID": "docs/06_r_syntax_basics.html#commenting",
    "href": "docs/06_r_syntax_basics.html#commenting",
    "title": "7¬† üëæ Basics of R syntax",
    "section": "7.1 Commenting",
    "text": "7.1 Commenting\n\nDenoted with # in a .qmd code chunk or your .R\nR does not evaluate this. So comments can be written in natural language\nUsed to explain what the code:\n\nis doing\nnotes for yourself or teammates\nhelp explain and document your code for the future\n\nYou must document your code\n\nThis is really important. Don‚Äôt just write the code, comment different parts to explain what it is doing\n\nPick a consistent commenting strategy and stick with it\n\nSome people only use # to add comments to their code.\nMy personal preference is to write my comments like a bulleted list.\n\n\n```{r}\n#| label: one-plus-one\n# Notes:\n    #* Description: R script to add one to one\n    #* Updated: 2023-01-01\n        #** by: dcr\n\n# Calculate 1+1\n1+1\n```\nNotice, that I don‚Äôt use #|. This is because #| is a special thing in a .qmd code chunk to specify options. I instead use # to represent headers and #* for subheadings in my comments. This allows me to create a bulleted-list-type set of comments that are pretty easy to read and to also follow for teammates."
  },
  {
    "objectID": "docs/06_r_syntax_basics.html#objects",
    "href": "docs/06_r_syntax_basics.html#objects",
    "title": "7¬† üëæ Basics of R syntax",
    "section": "7.2 Objects",
    "text": "7.2 Objects\nObjects represent the temporarily stored (cached) result of any operation/function in R.\nYou define objects with the assignment operator (<-).\nHere is an example:\nSay that I want to evaluate the expression \\(1+1\\). But say I want to access the result of that expression later. Either because I don‚Äôt want to rerun the code or if I want to store the result and do some other things to it later.\nI can create an object to store the result of me evaluating the expression \\(1+1\\). R stores this object in your environment (see Chapter¬†3) and will stay accessible to you until you close out of RStudio (RStudio Team 2020).\n\n# Define a = 1+1\na <- 1+1\n\nSo with the code chunk above, what does a represent?\nLet‚Äôs check:\n\nprint(a)\n\n[1] 2\n\n\nNow let‚Äôs say that I want to evaluate the expression \\(1+1+1\\) later in my code. But I already evaluated part of this expression with \\(1+1\\)! Since I stored the result in a, I can just evaluate the expression \\(a+1\\) which is equivalent to \\(1+1+1\\).\n\n# Evaluate a+1\nb <- a+1\n\nWe should expect that \\(b=3\\):\n\nprint(b)\n\n[1] 3\n\n\n\n7.2.1 Functions\nFunctions are a specific type of object.\nFunctions are simply an object that takes an input and does something to that input. R is full of functions.\nSome examples of functions that we have already dealt with:\n\n<-: The input is the object and the name you want to assign the object\n+: The input are the numbers you want to sum\n\nFunctions more generally are predefined with underlying code (often very complex) that do some task for you. They are a shortcut so that you don‚Äôt have to rewrite that same code. Otherwise, everyone‚Äôs scripts would be much longer than they are.\nAs functions are a specific type of object, the whole idea behind a function is to only need to write the code once; rather than multiple times throughout a script.\nWe can write our own functions (advanced topic we aren‚Äôt going to go over), and we can access the functions written by other people to make our life easier.\nWhen someone writes a function and want to share it, they often have other related functions and code. They can package all of this code into a library and submit it to code repositories such as Github or CRAN (where you downloaded R; because what you downloaded came with basic functions like + and <-).\nIf there is a function that someone has written and packaged, you will need to install the underlying code onto your computer so that you can use it for your own work.\n\n7.2.1.1 Installing packages\nTo install a package from CRAN (often the default place to download packages from), you can use the built-in function install.packages()\n```{r}\n# Install some package called FakePackage\ninstall.packages(\"FakePackage\")\n\n# Install some package called FakePackage and another called OtherPackage\ninstall.packages(c(\"FakePackage\", \"OtherPackage\"))\n```\nThe install.package() function takes an input ‚Äì the name of the package you want to install (surrounded by quotations) ‚Äì and it will then perform some action with that input ‚Äì download the underlying code for that package and function.\n\n\n\n\n\n\nNote\n\n\n\nThe input for this and other functions ARE case-sensitive.\nFor example, if I ran the following instead:\n```{r}\ninstall.packages(\"fakepackage\")\n```\nI would get an error!\n\n\n\n\n7.2.1.2 Loading packages\nNow, how do I use my function?\nWell, you‚Äôve downloaded the package containing the function that you want to use, but you will need to now load it to your environment. Why? Well, again, remember that functions are just a type of object. More practically, think about the number of packages some one like me has on my computer. If every time I opened R, it automatically loaded all of that code, then my computer would probably melt. So instead, I just want to specify what I want to load.\nThere are a couple of options: 1. Most people load the entire package by writing:\n```{r}\n# Load packages\nlibrary(FakePackage) # load FakePackage\n```\n\nModularly loading only the functions you want from your packages with the box package (Rudolph and Schubert 2022):\n\n```{r}\n# Load packages\nbox::use(\n    FakePackage = FakePackage[FunctionIWant, OtherFunctionIWant], # Load FunctionIWant and OtherFunctionIWant in FakePackage\n    OtherPackage = [...] # load all functions in OtherPackage\n)\n```\nWhat are the benefits of the second option?\n\nI load only the functions that I actually am going to use\nSometimes functions can be named the same thing, do different things, and are from different packages. This can create a lot of confusion and can even lead to errors in R if R is confused about what to use. Loading things purposefully, you can identify all of this before you try to run it.\nPuts less strain on my computer\nEasier to read. Now I can see what functions I got from which package rather than it just loading everything from the packages I loaded with library()\n\nTo use one of the two options:\n\nUsing library(): No extra steps, library() comes with R when you downloaded it ‚Äì from the base-r package (technically)\nUsing box::use(): Need to install the box package. And then you can just use the code from above!\n\n\ninstall.packages(\"box\")\n\n\n\n\n\nRStudio Team. 2020. RStudio: Integrated Development Environment for r. Boston, MA: RStudio, PBC. http://www.rstudio.com/.\n\n\nRudolph, Konrad, and Michael Schubert. 2022. Box: Write Reusable, Composable and Modular r Code. https://github.com/klmr/box."
  },
  {
    "objectID": "docs/07_loading_data.html#how-to-load-data-for-this-class",
    "href": "docs/07_loading_data.html#how-to-load-data-for-this-class",
    "title": "8¬† Loading Data",
    "section": "8.1 How to load data for this class",
    "text": "8.1 How to load data for this class\nThere are technically a couple of options, but you ideally should use the second one.\nOption 1. Load the data by double clicking on the file\nOption 2. Write code to load the data\nFor this class only, will both options work. However, datasets come in many different forms. Sometimes data come to you as .csv files, sometimes as .dta files, sometimes in an SQL database, etc. In these cases, you will not be able to load the data by clicking on the file. You will have to write the code.\nEven for this class, you should ideally write code to load the data. Why? Well, you want everything you do for your analyses documented. Including loading the data. One of the main reasons for this is to reduce the number of steps that you have to take for you to run your analyses or for someone else to run your analyses. Writing the code that you need to load your dataset helps with this.\nTo write the code to write your data, you can simply enter:\n\n# Load my data\nload(\"psci_2075_data_file.RData\")\n\nWhat did that do? Running that loaded three different datasets. The nes, the world, and the states dataset. These popped up as three objects called nes, world, and states in your RStudio environment.\nTo access these, you can access them the way you would with any object: by referring to their name.\nIf you want a preview of each you can use the head() function:\n\n# Preview first 5 rows of:\n    #* NES\nhead(nes, 5)\n\n# A tibble: 5 x 51\n  follow      birthyr turno~1 vote12 meet  march compr~2 ftobama ftblack ftwhite\n  <fct>         <int> <fct>   <fct>  <fct> <fct> <fct>     <int>   <int>   <int>\n1 Most of th~    1960 Defini~ Barac~ Extr~ Have~ Compro~     100     100     100\n2 Some of th~    1957 Probab~ Not a~ A li~ Have~ Compro~      39       6      74\n3 Most of th~    1963 Defini~ Mitt ~ Extr~ Have~ Sticks~       1      50      50\n4 Most of th~    1980 Defini~ Barac~ Not ~ Have~ Compro~      89      61      64\n5 Most of th~    1974 Defini~ Mitt ~ Very~ Have~ Sticks~       1      61      58\n# ... with 41 more variables: fthisp <int>, ftgay <int>, fttrump <int>,\n#   fthrc <int>, ftsanders <int>, ftpolice <int>, ftfem <int>, ftmuslim <int>,\n#   ftsci <int>, econnow <fct>, lcself <fct>, disc_b <fct>, disc_h <fct>,\n#   disc_g <fct>, disc_w <fct>, disc_m <fct>, disc_fed <fct>,\n#   disc_police <fct>, immig_numb <fct>, terror_worry <fct>, healthspend <fct>,\n#   finwell <fct>, warmcause <fct>, freetrade <fct>, stopblack <fct>,\n#   stop_ever <fct>, birthright_b <fct>, bo_muslim <fct>, amer_ident <fct>, ...\n\n    #* States\nhead(states, 5)\n\n       state st raperate murderrate abort   density     ineq region   gunfree\n1    Alabama AL     31.9        6.9    16  86.17970 46.01423  South  0.444921\n2     Alaska AK     73.3        3.1    15   1.08848 34.18490   West  0.932850\n3    Arizona AZ     32.0        5.4    20  42.12770 49.00724   West  0.969988\n4   Arkansas AR     47.3        6.2    11  49.10960 46.83973  South  0.520867\n5 California CA     23.6        5.3    33 211.97700 51.47233   West -3.270630\n    alcfree    mjfree  marrfree  freedom knowgov evangel poptotal stuspend\n1 -0.024292 -0.054232 -0.009304  21.6063   63.76    42.8  4700000     5273\n2 -0.003965  0.076145 -0.010426  28.5846   68.44    18.7   686293     8599\n3  0.016018  0.015321 -0.009304  32.4745   52.10    18.1  6500000     4785\n4  0.005779 -0.012482 -0.009304  -5.7844   67.08    39.9  2900000     5140\n5  0.015981  0.043902  0.041186 -85.7562   88.31    11.5 37000000     5685\n  ptratio hsdiploma democrat       pid house senate   inc minwage year\n1   15.77      77.5 30.54249 -0.033898    -1  0.976 34650    7.25 2016\n2   16.29      90.4 26.38180 -0.350000     0  0.638 45529    7.75 2016\n3   20.75      85.1 28.86411 -0.102564     0  0.576 35875    7.90 2016\n4   12.90      81.7 27.68069  0.084507     0  0.816 34014    6.25 2016\n5   19.80      81.2 37.08743  0.179825    -1 -1.395 44481    9.00 2016\n   polscore newimmig popover65 percwom medinc turnout  margin co2 femleg\n1 -0.073118     4063    657792   75.49  42590    0.59 59.5446 130   11.4\n2  0.036343     1799     54938   79.02  57431    0.59 52.4528  43   18.3\n3 -0.058591    20333    881831   84.00  48621    0.53 37.1173  88   33.3\n4 -0.022314     2874    419981   88.52  41302    0.51 78.2980  62   17.0\n5 -0.088499   210591   4200000   89.94  53367    0.55 35.9504 368   30.8\n  corrupt infant trumpwin weed death stand obamawin\n1      23   9.53        1    0     1     1        0\n2      NA   5.93        1    1     0     1        1\n3      18   6.85        1    1     1     1        0\n4       8   7.84        1    1     1     0        0\n5      52   5.32        0    1     1     0        1\n\n    #* World\nhead(world, 5)\n\n  iso3c        fdi nourish         aid          oil homicide  military infemale\n1   AFG  0.3400968    24.7 40.45103119  0.002378189      3.5 1.8974728     70.7\n2   AGO -3.9131508    20.7  0.31614304 38.618626728       NA 4.2448843    100.6\n3   ALB  9.1340709      NA  3.09176990  1.530367571      4.4 1.5585919     13.2\n4   ARE  3.0752631     5.0          NA 20.177806945      0.8 6.1194678      6.5\n5   ARG  2.6751617     5.0  0.03136884  2.129501789       NA 0.8148781     11.6\n    inf infmale       co2     trade   health     gdppc womleg gtbeduc\n1  75.1    79.3 0.5315226  54.96733 9.197723  1629.167   27.7 0.62951\n2 109.6   117.9 0.3523340 105.33771 3.391146  6360.849   38.6 0.78801\n3  14.8    16.4 0.3855484  85.46456 5.335035  9646.582   16.4 0.98444\n4   7.3     8.0 0.5621849 151.00043 3.929452 56245.478   22.5      NA\n5  13.0    14.4 0.4435952  34.97101 6.550156 18333.995   38.5 1.03598\n               region              country cid imfcode politycode bankscode\n1          South Asia          Afghanistan 700     512        700        10\n2  Sub-Saharan Africa               Angola 540     614        540        35\n3              Europe              Albania 339     914        339        20\n4 ME and North Africa United Arab Emirates 696     466        696        NA\n5       Latin America            Argentina 160     213        160        40\n  dpicode                  aclpregion          epost                  regime\n1     AFG Eastern Europe/Soviet Union      president   Civilian Dictatorship\n2     AGO          Sub-Saharan Africa      president   Civilian Dictatorship\n3     ALB Eastern Europe/Soviet Union prime minister Parliamentary Democracy\n4     ARE                  Oil States      president      Royal Dictatorship\n5     ARG               Latin America      president  Presidential Democracy\n  stra fhprights fhliberties personal lifeexp polity2 durable    rgdpe  pwtpop\n1    0         5           6        0    <NA>      NA       0       NA      NA\n2    0         6           5        0    <NA>      -2      11  87251.8 18.0380\n3    0         3           3        0    <NA>       9      11  21701.8  3.1814\n4    0         6           5        0    <NA>      -8      37       NA      NA\n5    5         2           2        0    <NA>       8      25 524470.0 39.7143\n    pwthc turnout       colony womyear urban    young ethfrac\n1      NA   45.83           UK      NA 23.28       NA  0.7693\n2      NA   62.77     Portugal    1975 53.96 46.32196  0.7867\n3 2.99982   53.31 Soviet Union    1920 46.14 26.35428  0.2204\n4      NA      NA         <NA>      NA    NA       NA      NA\n5 2.79697   81.07        Spain    1947 90.26 26.11798  0.2550\n\n# Preview first 10 rows of NES:\nhead(nes, 10)\n\n# A tibble: 10 x 51\n   follow     birthyr turno~1 vote12 meet  march compr~2 ftobama ftblack ftwhite\n   <fct>        <int> <fct>   <fct>  <fct> <fct> <fct>     <int>   <int>   <int>\n 1 Most of t~    1960 Defini~ Barac~ Extr~ Have~ Compro~     100     100     100\n 2 Some of t~    1957 Probab~ Not a~ A li~ Have~ Compro~      39       6      74\n 3 Most of t~    1963 Defini~ Mitt ~ Extr~ Have~ Sticks~       1      50      50\n 4 Most of t~    1980 Defini~ Barac~ Not ~ Have~ Compro~      89      61      64\n 5 Most of t~    1974 Defini~ Mitt ~ Very~ Have~ Sticks~       1      61      58\n 6 Most of t~    1958 Defini~ Someo~ Mode~ Have~ Sticks~       0      50      51\n 7 Most of t~    1978 Defini~ Someo~ Extr~ Have~ Compro~      73     100      70\n 8 Most of t~    1951 Defini~ Mitt ~ Not ~ Have~ Compro~       0      70      70\n 9 Most of t~    1973 Defini~ Mitt ~ Mode~ Have~ Sticks~      12      50      50\n10 Most of t~    1936 Defini~ Barac~ Extr~ Have~ Compro~      87      75      90\n# ... with 41 more variables: fthisp <int>, ftgay <int>, fttrump <int>,\n#   fthrc <int>, ftsanders <int>, ftpolice <int>, ftfem <int>, ftmuslim <int>,\n#   ftsci <int>, econnow <fct>, lcself <fct>, disc_b <fct>, disc_h <fct>,\n#   disc_g <fct>, disc_w <fct>, disc_m <fct>, disc_fed <fct>,\n#   disc_police <fct>, immig_numb <fct>, terror_worry <fct>, healthspend <fct>,\n#   finwell <fct>, warmcause <fct>, freetrade <fct>, stopblack <fct>,\n#   stop_ever <fct>, birthright_b <fct>, bo_muslim <fct>, amer_ident <fct>, ...\n\n\nIf you want to see the entire thing, you can use the View() function:\n\n# View NES\nView(nes)\n\n# View States\nView(states)\n\n# View World\nView(world)"
  },
  {
    "objectID": "docs/07_loading_data.html#to-view-the-number-of-rows-you-have-in-your-dataset",
    "href": "docs/07_loading_data.html#to-view-the-number-of-rows-you-have-in-your-dataset",
    "title": "8¬† Loading Data",
    "section": "8.2 To view the number of rows you have in your dataset",
    "text": "8.2 To view the number of rows you have in your dataset\n\n# Number of observations (rows) for:\n    #* NES\nnrow(nes)\n\n[1] 1178\n\n    #* States\nnrow(states)\n\n[1] 50\n\n    #* World\nnrow(world)\n\n[1] 182"
  },
  {
    "objectID": "docs/07_loading_data.html#to-view-the-number-of-columns-you-have-in-your-dataset",
    "href": "docs/07_loading_data.html#to-view-the-number-of-columns-you-have-in-your-dataset",
    "title": "8¬† Loading Data",
    "section": "8.3 To view the number of columns you have in your dataset",
    "text": "8.3 To view the number of columns you have in your dataset\n\n# Number of variables (columns) for:\n    #* NES\nncol(nes)\n\n[1] 51\n\n    #* States\nncol(states)\n\n[1] 42\n\n    #* World\nncol(world)\n\n[1] 42"
  },
  {
    "objectID": "docs/08_summarizing_data.html#the-central-tendency",
    "href": "docs/08_summarizing_data.html#the-central-tendency",
    "title": "9¬† üëÄ Descriptive statistics and summarizing your data",
    "section": "9.1 The central tendency",
    "text": "9.1 The central tendency\nThe central tendency of a variable (univariate) would describe where most of your observations lie on possible values that a observation can take on for that particular variable.\nThere are a number of ways to quantify this. The most common are the mean (\\(\\bar{x}\\)) and the median."
  },
  {
    "objectID": "docs/08_summarizing_data.html#the-spread",
    "href": "docs/08_summarizing_data.html#the-spread",
    "title": "9¬† üëÄ Descriptive statistics and summarizing your data",
    "section": "9.2 The spread",
    "text": "9.2 The spread\nIt is not necessarily the case that observations all sit at the mean (they may, but do not have to). Think for example about house prices. If the average house price is $405,000, that does not imply that every single house price is $405,000. Some will be higher than that or lower than that.\nThis motivates our need to describe a variable by not just its central tendency but also the variance or spread around the mean. There are two common metrics we can calculate to do this:\n\nThe variance (\\(\\sigma^2\\))\nThe standard deviation (\\(\\sigma\\))\n\nThe difference between the two is that the standard deviation is\n\\[\n\\sigma (\\text{std. dev.}) = \\sqrt{\\sigma^2 (\\text{variance})}\n\\]"
  },
  {
    "objectID": "docs/08_summarizing_data.html#easy-ways-to-describe-these-with-r",
    "href": "docs/08_summarizing_data.html#easy-ways-to-describe-these-with-r",
    "title": "9¬† üëÄ Descriptive statistics and summarizing your data",
    "section": "9.3 Easy ways to describe these with R",
    "text": "9.3 Easy ways to describe these with R\n\n9.3.1 Graphics\nIn R, there are tons of graphical ways that we can describe a single variable.\nA really handy website that you can use for inspiration and for example code, is R-Graph-Gallery.\nThe most popular R package for making nice-looking graphics in R is called ggplot2() (Wickham 2016).\nFor your first time using it, you should install the ggplot2() (Wickham 2016) package.\n\n# Install the ggplot2 package\ninstall.packages(\"ggplot2\")\n\nThen once we‚Äôve installed it, we want to make sure to load by using the library() function in our .R script before we use it.\n\nlibrary(ggplot2)\n\n\n9.3.1.1 Histograms\nHistograms are really useful charts that we can use to visually depict the distribution of observations for a particular variable in our dataset.\nSay, for example we want to visualize the breakdown of countries‚Äô GDPPC. We can do that with a histogram.\n\nworld %>% # grab the world dataset, and do the following\n    ggplot() + # make a ggplot object\n    geom_histogram( # make a histogram\n        aes(x = gdppc), # use the gdppc variable\n        fill = \"#D3D3D3\", # fill the bars with light grey\n        color = \"#000000\" # make the outlines of the bars black\n    ) +\n    theme_minimal() + # change the theme to be prettier\n    labs( # clean up the labels\n        x = \"GDP (Per Capita)\", # change the x-axis label to this\n        y = \"Count of countries\", # change the y-axis label to this\n        captions = \"Data source: World dataset.\" # add a caption\n    )\n\nWhat the code is doing above:\n\nGrab the world data set and use the pipe function from the magrittr package (Bache and Wickham 2022) to connect the other functions to it.\nCreate a ggplot() (Wickham 2016) object.\nI want to make a histogram, so I‚Äôm going to use ggplot (Wickham 2016) and will use the geom_histogram() function.\nInside the geom_histogram() function, I want to tell it what variable I want to plot. So I am going to use the aes() function which will grab from the world dataset object and will then grab the gddpc variable. I am going to use the log() function to log-transform it. This will make the x-axis a bit easier to read.\nFor the histogram, I want to change the default colors of the graph a bit. I want to fill in the bars with a light grey color (using a hex code) \"#D3D3D3\" and I want to make the outline of the bars black (using a hex code) \"#000000\".\nThen, I want to make the rest of the plot look a little bit prettier - so I am going to use the theme_minimal() function from the ggplot2 package.\nAlso to help make the plot a bit prettier, I am going to change some labels for the figure with the labs() function from the ggplot2 package. To change my x-axis label, I am going to set x equal to \"GDP (Per Capita)\". To change my y-axis label, I am going to set y equal to \"Count of countries\". And I want to add a caption at the bottom for my reader to know what dataset this is from, so I am going to set caption equal to \"Data source: World dataset.\".\n\n\n\n`stat_bin()` using `bins = 30`. Pick better value with `binwidth`.\n\n\nWarning: Removed 6 rows containing non-finite values (`stat_bin()`).\n\n\n\n\n\nFigure¬†9.1: Distribution of Countries‚Äô GDP (Per capita)\n\n\n\n\n\n\n9.3.1.2 Boxplot\nAnother common way to visually describe a variable in your data is through a boxplot. Boxplots lets us visualize not only the median (one metric of our central tendency) of a variable (the line down the middle), but also the spread through the edges of the box (which represent the first and third quantiles), and the minimum and maximum values. Any extra ‚Äúdots‚Äù that the plot shows reflects ‚Äúoutliers‚Äù ‚Äì which are observations that are quite abnormal relative to the sample.\n\nworld %>% # grab the world dataset\n    ggplot() + # make a ggplot object\n    geom_boxplot( # make a geom_boxplot\n        aes(x = gdppc), # using the gdppc variable\n        fill = \"#D3D3D3\", # fill it with a light grey color\n        alpha = 0.7 # don't make the color solid\n    ) +\n    theme_minimal() + # use the minimal theme to look nicer\n    labs( # adjust the labels\n        x = \"GDP (per capita)\", # change the x axis to this\n        caption = \"Data source: World dataset.\"\n    )\n\nTo make the boxplot for the GDP (per capita) gdppc variable in the world dataset, I can run the code above.\n\nI first grab the world dataframe object\nUsing the pipe function (%>%), I connect the world dataframe object to the code below.\nI first create a ggplot object with the ggplot() function.\nI then specify that with that ggplot object, I want to make a boxplot by using the geom_boxplot() function from the ggplot2 package. I specify a couple of options. I first specify that I want to use the gdppc variable for the plot. I also indicate that I want the fill color for the plot to be light grey (hex code \"#D3D3D3\"). I then don‚Äôt want the color to be solid light grey and want to add some transparency too it, so I specify the alpha option to make it a bit more transparent.\nI then use the theme_minimal function from ggplot2 to make the plot look a bit nicer.\nFinally, I wanted to adjust the labels and so I use the labs() function from the ggplot2 function. Since I want to adjust the label for the x-axis, I specify the x option and set it equal to GDP (per capita). I also want to add a caption to indicate where I got these data from and so I use the caption option and set it equal to the text that I want for the caption.\n\n\n\nWarning: Removed 6 rows containing non-finite values (`stat_boxplot()`).\n\n\n\n\n\nFigure¬†9.2: Boxplot of GDP (per capita)\n\n\n\n\n\n\n\n9.3.2 Tables\nTables are a numeric, rather than visual, way to help us understand characteristics of particular variables in our dataset.\nUnlike what we have with Figure¬†9.1, we may want concrete numerical descriptions of our data. There are a few ways we can do this.\nWe can calculate the mean of our variable by using the mean() function:\n\nmean(world$gdppc, na.rm = TRUE) # from the world dataset, grab ($) the column called gdppc\n\n[1] 16326.78\n\n\n\n\n\n\n\n\nNote\n\n\n\nNote that for the mean and sd functions, I have to include an additional option (na.rm = TRUE) to ignore missing values: countries that didn‚Äôt report their GDP (per capita) in the dataset.\n\n\nWe can also calculate the standard deviation of our variable by using the sd() function:\n\nsd(world$gdppc, na.rm = TRUE) # from the world dataset, grab ($) the column called gdppc\n\n[1] 18456.59\n\n\nAdditionally, if we want to see both the mean and the median, we can use the summary() function:\n\nsummary(world$gdppc) # from the world dataset, grab ($) the column called gdppc\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's \n   683.8   3249.1   9863.2  16326.8  21183.4 123593.0        6 \n\n\nNotice how it doesn‚Äôt give us a calculation for our standard deviation? UGHH.\nAnother drawback to these is that the output doesn‚Äôt look all that nice and it would also require us to copy and paste things. Which opens up the chance that we accidentally copy the result for our standard deviation and refer to it as our mean in our report or we may accidentally pick the wrong number.\nOne super nifty function that we can use is the datasummary_skim() function from the modelsummary package (Arel-Bundock 2022). What the modelsummary package does, is it can calculate these things, along with quite a few others as well.\nSo, I am going to tell R to grab my world dataset object, and to apply the following functions to it ‚Äì I do this with the pipe function (%>%):\n\nWith dplyr‚Äôs (Wickham et al. 2023) select() function, I am going to select() the gdppc column\nWith dplyr‚Äôs (Wickham et al. 2023) rename() function, I am going to rename() the gdppc column to GDP (per capita)\n\n\n\n\n\n\n\nNote\n\n\n\nNote how instead of using quotations in the rename() function, I am using the forward apostrophe symbol? I am doing this because I am technically renaming the column. So if I am using the rename() function, I should use that instead of quotations.\n\n\n\nThen, with modelsummary‚Äôs (Arel-Bundock 2022) datasummary_skim() function, I am going to make a table for the selected variables.\n\nI want to put a note on the bottom of the table telling my readers where I got the data for that variable from, so I am going to add a note that says \"Data source: world dataset.\".\nI want to have the output be easy to pull over to a .docx file, so I am going to save a .html file called gdppc_summary.html in my working directory (should be the psci_2075 folder on my Desktop). I can then find the file on my computer, and open with my web browser of choice by double clicking on the gdppc_summary.html file (e.g., Firefox, Google Chrome, Safari, etc.), and then I can copy and paste the table that it opens into my report document.\n\n\n\nworld %>%\n    select(gdppc) %>%\n    rename(`GDP (per capita)` = gdppc) %>%\n    datasummary_skim(\n        notes = \"Data source: world dataset.\",\n        output = \"gdppc_summary.html\"\n    )\n\n\n\n\n\nTable¬†9.1:  Descriptive statistics of countries‚Äô GDP (per capita) \n \n  \n      \n    Unique (#) \n    Missing (%) \n    Mean \n    SD \n    Min \n    Median \n    Max \n       \n  \n \n\n  \n    GDP (per capita) \n    177 \n    3 \n    16326.8 \n    18456.6 \n    683.8 \n    9863.2 \n    123593.0 \n     \n\n\n  \n\n\n Data source: world dataset.\n\n\n\n\n\nIt gives me a whole bunch of things. Including a (albeit small) histogram in the last column. Nice!"
  },
  {
    "objectID": "docs/08_summarizing_data.html#some-final-notes",
    "href": "docs/08_summarizing_data.html#some-final-notes",
    "title": "9¬† üëÄ Descriptive statistics and summarizing your data",
    "section": "9.4 Some final notes",
    "text": "9.4 Some final notes\n\nIf you want to know how to make a graph in R, I highly recommend R Graph Gallery. They have tons of examples (with code) and using either base-r plots (the uglier, but easier to create, ones) or ggplot2 (the prettier, but more verbose, ones).\nAn example .R file from Dr.¬†Philips‚Äô lecture can be found on canvas.\nTo see an example .R file for all of this (all together and in one place), can be found on this page. (You can either download the file or copy and paste its contents into your own .R file.)\nA lot of people love to jump at the chance to add all these colors to graphs and such. I am much more skeptical of this. While I love loud colors, they can be a problem in data visualization. You should not rely exclusively on color in your data visualizations as there is significant variation in people‚Äôs ability to detect and distinguish particular colors. Therefore, though it is boring, I often recommend grey scale to make it easier for everyone to see your graphs!\nAlso, you should be very careful about what types of figures you use to describe your data. You are providing a visual narrative about your data. Just as a comic book author should be conscious and careful about their choices for their illustrations, so too should an analyst be with their data visualizations.\n\n\n\n\n\nArel-Bundock, Vincent. 2022. ‚Äúmodelsummary: Data and Model Summaries in R.‚Äù Journal of Statistical Software 103 (1): 1‚Äì23. https://doi.org/10.18637/jss.v103.i01.\n\n\nBache, Stefan Milton, and Hadley Wickham. 2022. Magrittr: A Forward-Pipe Operator for r.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data Analysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Romain Fran√ßois, Lionel Henry, Kirill M√ºller, and Davis Vaughan. 2023. Dplyr: A Grammar of Data Manipulation."
  },
  {
    "objectID": "docs/references.html",
    "href": "docs/references.html",
    "title": "References",
    "section": "",
    "text": "Allaire, J. J., Charles Teague, Carlos Scheidegger, and Yihui Xie. 2022.\nQuarto. https://doi.org/10.5281/zenodo.5960048.\n\n\nArel-Bundock, Vincent. 2022. ‚Äúmodelsummary: Data and Model Summaries in\nR.‚Äù Journal of Statistical Software 103\n(1): 1‚Äì23. https://doi.org/10.18637/jss.v103.i01.\n\n\nBache, Stefan Milton, and Hadley Wickham. 2022. Magrittr: A\nForward-Pipe Operator for r.\n\n\nR Core Team. 2021. R: A Language and Environment for Statistical\nComputing. Vienna, Austria: R Foundation for Statistical Computing.\nhttps://www.R-project.org/.\n\n\nRStudio Team. 2020. RStudio: Integrated Development Environment for\nr. Boston, MA: RStudio, PBC. http://www.rstudio.com/.\n\n\nRudolph, Konrad, and Michael Schubert. 2022. Box: Write Reusable,\nComposable and Modular r Code. https://github.com/klmr/box.\n\n\nWickham, Hadley. 2016. Ggplot2: Elegant Graphics for Data\nAnalysis. Springer-Verlag New York. https://ggplot2.tidyverse.org.\n\n\nWickham, Hadley, Romain Fran√ßois, Lionel Henry, Kirill M√ºller, and Davis\nVaughan. 2023. Dplyr: A Grammar of Data Manipulation.\n\n\nXie, Yihui. 2019. ‚ÄúTinyTeX: A Lightweight, Cross-Platform, and\nEasy-to-Maintain LaTeX Distribution Based on TeX Live.‚Äù\nTUGboat 40 (1): 30‚Äì32. https://tug.org/TUGboat/Contents/contents40-1.html."
  }
]