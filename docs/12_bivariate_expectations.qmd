# Expectations about bivariate relationships

```{r}
#| label: setup-block
#| echo: false
#| eval: true
#| 
# Modularly load functions
box::use(
    magrittr = magrittr[`%>%`],
    dplyr = dplyr[select, rename, filter, mutate, case_when],
    modelsummary[datasummary_skim, datasummary_crosstab],
    ggplot2 = ggplot2[ggplot, aes, geom_histogram, geom_boxplot, geom_point, theme_minimal, labs],
    wesanderson = wesanderson[wes_palette]
)
library(ggmosaic)
# Load data
load(file = "C:/Users/damon/Desktop/psci_2075/psci_2075_data.RData")
waffles <- read.csv(file = "../assets/waffles.csv", sep = ";")
```
Why are we collecting data and describing variables in isolation or patterns between two variables in the first place? While this is kind of a meta question, it is an important one to address.

In science we want to explain phenomenon. We want to deepen our understanding of the world. We can certainly use observation to help with this. However, the world can be an extremely complex place. Phenomenon may occur for multiple reasons or they may occur for a single reason that appears like it might be caused for multiple reasons. 

While we can provide observational evidence explaining that the reason it is warmer during the day than during the night is because of the energy emitted from the surface of the sun, we might want to see whether this occurs *because* of the sun or if there is some other explanation that co-occurs with the sun but is what is actually causing differences in temperatures.

What we've done is developed a hypothesis. In this example, we've laid out an expectation that the sun makes the earth warmer. Now, how can we demonstrate whether our hypothesis is correct or not? We can just tell people, "Hey, notice how it is warmer when the sun is up? That is because of the sun!" People may have not made this same conclusion or noticed this pattern before. So they may doubt you. What you need to do, is provide some sort of evidence demonstrating that this pattern indeed exists. 

```{mermaid}
%%| label: fig-simple-hypothesis
%%| fig-cap: My simple hypothesis
%%| fig-width: 6
%%{init: {'theme':'base', 'themeVariables':{'primaryColor':'#ffffff', 'primaryBorderColor': '#000000'}}}%%
graph LR
A[Presence of Sun] --> B[Temperature] 
```

One such way of providing evidence of this pattern is by collecting data on each feature (temperature and presence of the sun) in isolation and then demonstrating the pattern between the two. First, we can develop a tool to measure heat - a thermometer. Next, we can develop a procedure where we check every so often to see if the sun is still in the sky, record whether it was or not. While we do this we can then look over to our thermometer and record the temperature. What we can then do is examine the patterns by which the temperature is higher and whether the sun is present or not. We can do this by constructing something like the two-way boxplot that we pulled together in [the exercise on examining simple bivariate relationships](10_simple_bivariate_analyses.qmd).

What if, however, someone comes to you and says: "No its not the sun that explains temperature, it is the presence of clouds." You may think to yourself "Well, yeah, the presence of clouds could definitely contribute to this, but even when it is not cloudy I can have either a cold or warm day. I still think the biggest factor is the sun."

The alternative hypothesis this person presents may be what we call a *confounding* variable. We have this expectation about the world that we can simplify into what is called a "model". In our simplest form of our model, we believe what is presented in @fig-simple-hypothesis But now, we may be expecting a slightly more complicated "model" of the world as shown in @fig-confounded-hypothesis.

```{mermaid}
%%| label: fig-confounded-hypothesis
%%| fig-cap: Confounded hypothesis
%%{init: {'theme':'base', 'themeVariables':{'primaryColor':'#ffffff', 'primaryBorderColor': '#000000'}}}%%

graph LR
A[Presence of Sun] --> B[Temperature]
C[Clouds] --> A
C --> B
```

So, what we need to do, to examine whether our intuitions are correct is determine *how much* of the influence that the sun has on the temperature is explained by the presence of clouds.

What we can do, is we can collect data on the temperature, the presence of the sun, but we can also record how much of the sky is covered by clouds when we record our temperature and the presence of the sun.

Now, what we can do, is examine the patterns between the sun and the temperature, but we can examine those patterns by *holding our confounding variable* constant. 

This is really hard to do with the boxplot we may have made, right? Right. So we will have to be a bit more sophisticated in how we demonstrate these patterns now. What we can do, is do things like split our data up based on this confounding variable and create a mosiac plot for each of these two subsamples. If we have continuous data, we can build a scatter plot but add colors to the dots on the scatter plot based on the values that those observations take on for that confounding variable.

Let's demonstrate each of these with an example to make it a bit less abstract.

## Categorical data

For this first coding example, say that we have the following primary hypothesis

```{mermaid}
%%| label: fig-categorical-simple-hypothesis
%%| fig-cap: Hypothesis - The presence of waffle houses explains divorce rates
%%{init: {'theme':'base', 'themeVariables':{'primaryColor':'#ffffff', 'primaryBorderColor': '#000000'}}}%%
graph LR
A[Waffle Houses] --> B[Divorce]
```

Let me turn to a dataset from @mcelreath_2020_cpc. The dataset provides state-level data on marriage rates, divorce rates, population demographics, and more.

I am interested in examining the hypothesis depicted in @fig-categorical-simple-hypothesis.

```{r}
#| label: cleaning
#| echo: false
#| eval: true
waffle_cat <- waffles %>%
    mutate(
        WaffleHouses_Binary = ifelse(WaffleHouses > 0, 1, 0),
        WaffleHouses_Cat = factor(
            WaffleHouses_Binary,
            labels = c(
                "No",
                "Yes"
            ),
            ordered = TRUE
        ),
        Age = case_when(
            MedianAgeMarriage >= 18.0 & MedianAgeMarriage <= 20.0 ~ 1.0,
            MedianAgeMarriage >= 20.1 & MedianAgeMarriage <= 22.0 ~ 2.0,
            MedianAgeMarriage >= 22.1 & MedianAgeMarriage <= 24.0 ~ 3.0,
            MedianAgeMarriage >= 24.1 & MedianAgeMarriage <= 26.0 ~ 4.0,
            MedianAgeMarriage >= 26.1 & MedianAgeMarriage <= 28.0 ~ 5.0,
            MedianAgeMarriage >= 28.1 ~ 6.0
        ),
        Age_Cat = factor(
            Age,
            labels = c(
                "22-24",
                "24-26",
                "26-28",
                "28+"
            ),
            ordered = TRUE
        ),
        Divorce_Norm = scale(Divorce)[,1],
        Divorce_Cat = case_when(
            Divorce_Norm < -1 ~ -2.0,
            Divorce_Norm >= -1 & Divorce_Norm < 0 ~ -1.0,
            Divorce_Norm == 0 ~ 0,
            Divorce_Norm > 0 & Divorce_Norm <= 1 ~ 1.0,
            Divorce_Norm > 1 ~ 2.0
        ),
        Divorce_Cat_Labelled = factor(
            Divorce_Cat,
            labels = c(
                "Much lower than average",
                "Lower than average",
                "Higher than average",
                "Much Higher than average"
            ),
            ordered = TRUE
        )
    )
```


Let me first describe each of the variables in isolation. I do this to get an understanding of each of the variables themselves.

```{r}
#| label: tbl-simple-descriptives-example
#| tbl-cap: Simple descriptive statistics
#| echo: true
#| eval: false
waffle_cat %>% # grab the cleaned nes dataset from above
    select( # grab the following columns
        WaffleHouses_Binary,
        Divorce_Cat
    ) %>%
    datasummary_skim(
        data = ., # use the dataset linked with the pipe operators
        notes = "Data source: Waffles dataset McElreath(2020).", # provide a caption for the table
        output = "summary_stats_1.docx" # save the output to this file
    )
```

```{r}
#| label: tbl-simple-descriptives
#| tbl-cap: Simple descriptive statistics
#| echo: false
#| eval: true
waffle_cat %>% # grab the cleaned nes dataset from above
    select( # grab the following columns
        WaffleHouses_Binary,
        Divorce_Cat
    ) %>%
    datasummary_skim(
        data = ., # use the dataset linked with the pipe operators
        notes = "Data source: Waffles dataset McElreath(2020).\n Credit: damoncroberts.com" # provide a caption for the table
    )
```

```{r}
#| label: fig-simple-histogram-example
#| fig-cap: Histograms of main variables
#| fig-subcap:
#|  - Waffle Houses
#|  - Divorce
#| echo: true
#| eval: false
waffle_cat %>% # grab the waffles dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = WaffleHouses_Cat), #put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black" # make the lines of the bars black
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Waffle Houses", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020)" # add this note to the plot
    )

waffle_cat%>% # grab the waffles dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = Divorce_Cat), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black" # make the lines of the bars black
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Divorces", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020)" # add this note to the plot
    )
```


```{r}
#| label: fig-simple-histogram
#| fig-cap: Histograms of main variables
#| fig-subcap:
#|  - Waffle Houses
#|  - Divorce
#| echo: false
#| eval: true
waffle_cat %>% # grab the nes_clean dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = WaffleHouses_Cat), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black", # make the lines of the bars black,
        stat = "Count" # since I want to count
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Waffle Houses", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020).\n Credit: damoncroberts.com" # add this note to the plot
    )

waffle_cat %>% # grab the nes_clean dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = Divorce_Cat), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black", # make the lines of the bars black,
        stat = "Count" # since I want to count
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Divorce", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020).\n Credit: damoncroberts.com" # add this note to the plot
    )
```

Now I can look at patterns between these two variables.

```{r}
#| label: cleaned-crosstab-example
#| eval: false
waffle_cat %>% # use the waffles_cat dataset...
    datasummary_crosstab( # ... with the dataset, create a crosstab
        WaffleHouses_Cat ~ Divorce_Cat_Labelled, #... and use the two cleaned variables
        notes = "Data source: Waffles dataset (McElreath 2020)", # add notes to table
        data = ., # and use the dataset connected by the pipe operator
        output = "cleaner_bivariate_crosstab.docx" # store the table in this word document
    )
```

```{r}
#| label: tbl-cleaned-crosstab
#| tbl-cap: Cross tabulation
#| echo: false
waffle_cat %>% # use the waffles_cat dataset...
    datasummary_crosstab( # ... with the dataset, create a crosstab
        WaffleHouses_Cat ~ Divorce_Cat_Labelled, #... and use the two cleaned variables
        notes = "Data source: Waffles dataset (McElreath 2020).\n Credit: damoncroberts.com", # add notes to table
        data = . # and use the dataset connected by the pipe operator
    )
```

```{r}
#| label: fig-cat-mosaic-plot-example
#| fig-cap: Mosaic plot
#| eval: false
#| echo: true
waffle_cat %>% # take the waffle_cat dataset
    ggplot() + # make a plot object
        geom_mosaic( # specifically a mosaic plot
            aes( # for the axes 
                x = product( # on the x axis, plot the combination of the following variables
                    WaffleHouses_Cat, 
                    Divorce_Cat_Labelled
                ),
                fill = WaffleHouses_Cat # fill it with the Divorce_Cat variable
            ),
        ) + 
        theme_minimal() + # add this theme
        scale_color_brewer(
            name = "Waffle House?", # make this the legend title
            wes_palette("Moonrise3") # add these color palettes
            ) + 
        labs( # adjust the labels to the plot
            x = "Divorce Rate", # x-axis label
            y = "Waffle House?", # y-axis label
            caption = "Data source: Waffles dataset (McElreath 2020)" # caption
        )
```

```{r}
#| label: fig-cat-mosaic-plot
#| fig-cap: Mosaic plot
#| eval: true
#| echo: false
waffle_cat %>% # take the waffle_cat dataset
    ggplot() + # make a plot object
        geom_mosaic( # specifically a mosaic plot
            aes( # for the axes 
                x = product( # on the x axis, plot the combination of the following variables
                    WaffleHouses_Cat, 
                    Divorce_Cat
                ),
                fill = WaffleHouses_Cat # fill it with the Divorce_Cat variable
            ),
        ) + 
        theme_minimal() + # add this theme
        scale_color_brewer(
            name = "Waffle House?", # make this the legend title
            wes_palette("Moonrise3") # add these color palettes
            ) + 
        labs(
            x = "Divorce rate",
            y = "Waffle House?",
            caption = "Data source: Waffles dataset (McElreath 2020).\n Credit: damoncroberts.com"
        )
```


Now let's say, I dig into the data a little bit more and wonder to myself (as any normal person would): "is this maybe *really* about waffles?" My new hypothesis is....

```{mermaid}
%%| label: fig-categorical-complicated-hypothesis
%%| fig-cap: Hypothesis - Age of marriage predicts divorce rate
%%{init: {'theme':'base', 'themeVariables':{'primaryColor':'#ffffff', 'primaryBorderColor': '#000000'}}}%%

graph LR
A[Waffle Houses] --> B[Divorce]
C[Age of marriage] --> A
C --> B
```


I am going to again provide descriptive statistics of each of the variables by themselves. Then I'll increase the complexity of my analysis a bit more.

```{r}
#| label: tbl-tri-descriptives-example
#| tbl-cap: Descriptive statistics
#| echo: true
#| eval: false
waffle_cat %>% # grab the cleaned nes dataset from above
    select( # grab the following columns
        WaffleHouses_Binary,
        Age,
        Divorce_Cat,
    ) %>%
    datasummary_skim(
        data = ., # use the dataset linked with the pipe operators
        notes = "Data source: Waffles dataset McElreath(2020).", # provide a caption for the table
        output = "summary_stats_2.docx" # save the output to this file
    )
```

```{r}
#| label: tbl-tri-descriptives
#| tbl-cap: Descriptive statistics
#| echo: false
#| eval: true
waffle_cat %>% # grab the cleaned nes dataset from above
    select( # grab the following columns
        WaffleHouses_Binary,
        Age,
        Divorce_Cat
    ) %>%
    datasummary_skim(
        data = ., # use the dataset linked with the pipe operators
        notes = "Data source: Waffles dataset McElreath(2020).\n Credit: damoncroberts.com" # provide a caption for the table
    )
```

```{r}
#| label: fig-tri-histogram-example
#| fig-cap: Histograms of main variables
#| fig-subcap:
#|  - Waffle Houses
#|  - Age
#|  - Divorce
#| echo: true
#| eval: false
waffle_cat %>% # grab the waffles dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = WaffleHouses_Cat), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black" # make the lines of the bars black
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Waffle Houses", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020)" # add this note to the plot
    )

waffle_cat %>% # grab the waffles dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = Age_Cat), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color
        color = "black" # make the lines of the bars black
    ) +
    theme_minimal() + # apply the minimal theme to it
    labs(# change some labels
        y = "Count", # change the y axis label to this
        x = "Age", # change the x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020)" # add this note to the plot
    )

waffle_cat%>% # grab the waffles dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = Divorce_Cat_Labelled), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black" # make the lines of the bars black
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Divorces", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020)" # add this note to the plot
    )
```


```{r}
#| label: fig-tri-histogram
#| fig-cap: Histograms of main variables
#| fig-subcap:
#|  - Waffle Houses
#|  - Age
#|  - Divorce
#| echo: false
#| eval: true
waffle_cat %>% # grab the nes_clean dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = WaffleHouses_Cat), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black", # make the lines of the bars black
        stat = "count"
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Waffle Houses", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020).\n Credit: damoncroberts.com" # add this note to the plot
    )

waffle_cat %>% # grab the nes_clean dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = Age_Cat), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black", # make the lines of the bars black
        stat = "count"
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Age", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020).\n Credit: damoncroberts.com" # add this note to the plot
    )

waffle_cat %>% # grab the nes_clean dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = Divorce_Cat_Labelled), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black", # make the lines of the bars black
        stat = "count"
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Divorce", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020).\n Credit: damoncroberts.com" # add this note to the plot
    )
```

I've looked at each of the variables by themselves then have gotten a sense of the patterns between the two primary variables of interest. But now, let me consider what this looks like between varying age ranges.

To do this, I am going to make the same mosaic plot I made above, but am going to make one for ***each*** age category
```{r}
#| label: fig-mosaic-plot-example
#| fig-cap: Mosiac plot
#| eval: false
#| echo: true
waffle_cat %>% # take the waffle_cat dataset
    filter(Age_Cat == "22-24") %>% # grab this age subset
    ggplot() + # make a plot object
        geom_mosaic( # specifically a mosaic plot
            aes( # for the axes 
                x = product( # on the x axis, plot the combination of the following variables
                    WaffleHouses_Cat,
                    Divorce_Cat_Labelled
                ),
                fill = WaffleHouses_Cat # fill it with the Divorce_Cat variable
            ),
        ) + 
        theme_minimal() + # add this theme
        scale_fill_brewer(
            name = "Divorce rate", # make this the legend title
            wes_palette("Moonrise3") # add these color palettes
            ) + 
        labs( # adjust the labels to the plot
            x = "Waffle House?", # x-axis label
            y = "Divorce rate", # y-axis label
            caption = "Data source: Waffles dataset (McElreath 2020)" # caption
        )

waffle_cat %>% # take the waffle_cat dataset
    filter(Age_Cat == "24-26") %>% # grab this age subset
    ggplot() + # make a plot object
        geom_mosaic( # specifically a mosaic plot
            aes( # for the axes 
                x = product( # on the x axis, plot the combination of the following variables
                    WaffleHouses_Cat,
                    Divorce_Cat_Labelled
                ),
                fill = WaffleHouses_Cat # fill it with the Divorce_Cat variable
            ),
        ) + 
        theme_minimal() + # add this theme
        scale_fill_brewer(
            name = "Divorce rate", # make this the legend title
            wes_palette("Moonrise3") # add these color palettes
            ) + 
        labs( # adjust the labels to the plot
            x = "Waffle House?", # x-axis label
            y = "Divorce rate", # y-axis label
            caption = "Data source: Waffles dataset (McElreath 2020)" # caption
        )

waffle_cat %>% # take the waffle_cat dataset
    filter(Age_Cat == "26-28") %>% # grab this age subset
    ggplot() + # make a plot object
        geom_mosaic( # specifically a mosaic plot
            aes( # for the axes 
                x = product( # on the x axis, plot the combination of the following variables
                    WaffleHouses_Cat,
                    Divorce_Cat_Labelled
                ),
                fill = WaffleHouses_Cat # fill it with the Divorce_Cat variable
            ),
        ) + 
        theme_minimal() + # add this theme
        scale_fill_brewer(
            name = "Divorce rate", # make this the legend title
            wes_palette("Moonrise3") # add these color palettes
            ) + 
        labs( # adjust the labels to the plot
            x = "Waffle House?", # x-axis label
            y = "Divorce rate", # y-axis label
            caption = "Data source: Waffles dataset (McElreath 2020)" # caption
        )

waffle_cat %>% # take the waffle_cat dataset
    filter(Age_Cat == "28+") %>% # grab this age subset
    ggplot() + # make a plot object
        geom_mosaic( # specifically a mosaic plot
            aes( # for the axes 
                x = product( # on the x axis, plot the combination of the following variables
                    WaffleHouses_Cat,
                    Divorce_Cat_Labelled
                ),
                fill = WaffleHouses_Cat # fill it with the Divorce_Cat variable
            ),
        ) + 
        theme_minimal() + # add this theme
        scale_fill_brewer(
            name = "Divorce rate", # make this the legend title
            wes_palette("Moonrise3") # add these color palettes
            ) + 
        labs( # adjust the labels to the plot
            x = "Waffle House?", # x-axis label
            y = "Divorce rate", # y-axis label
            caption = "Data source: Waffles dataset (McElreath 2020)" # caption
        )
```

```{r}
#| label: fig-mosaic-plot
#| fig-cap: Mosaic plot
#| fig-subcap:
#|  - 22-24 years old
#|  - 24-26 years old
#|  - 26-28 years old
#|  - 28+ years old
#| eval: true
#| echo: false
waffle_cat %>% # take the waffle_cat dataset
    filter(Age_Cat == "22-24") %>% # grab this age subset
    ggplot() + # make a plot object
        geom_mosaic( # specifically a mosaic plot
            aes( # for the axes 
                x = product( # on the x axis, plot the combination of the following variables
                    WaffleHouses_Cat,
                    Divorce_Cat_Labelled
                ),
                fill = WaffleHouses_Cat # fill it with the Divorce_Cat variable
            ),
        ) + 
        theme_minimal() + # add this theme
        scale_fill_brewer(
            name = "Divorce rate", # make this the legend title
            wes_palette("Moonrise3") # add these color palettes
            ) + 
        labs( # adjust the labels to the plot
            x = "Divorce rate", # x-axis label
            y = "Waffle House?", # y-axis label
            caption = "Data source: Waffles dataset (McElreath 2020). Credit: damoncroberts.com" # caption
        )

waffle_cat %>% # take the waffle_cat dataset
    filter(Age_Cat == "24-26") %>% # grab this age subset
    ggplot() + # make a plot object
        geom_mosaic( # specifically a mosaic plot
            aes( # for the axes 
                x = product( # on the x axis, plot the combination of the following variables
                    WaffleHouses_Cat,
                    Divorce_Cat_Labelled
                ),
                fill = WaffleHouses_Cat # fill it with the Divorce_Cat variable
            ),
        ) + 
        theme_minimal() + # add this theme
        scale_fill_brewer(
            name = "Divorce rate", # make this the legend title
            wes_palette("Moonrise3") # add these color palettes
            ) + 
        labs( # adjust the labels to the plot
            x = "Divorce rate", # x-axis label
            y = "Waffle house?", # y-axis label
            caption = "Data source: Waffles dataset (McElreath 2020). Credit: damoncroberts.com" # caption
        )

waffle_cat %>% # take the waffle_cat dataset
    filter(Age_Cat == "26-28") %>% # grab this age subset
    ggplot() + # make a plot object
        geom_mosaic( # specifically a mosaic plot
            aes( # for the axes 
                x = product( # on the x axis, plot the combination of the following variables
                    WaffleHouses_Cat,
                    Divorce_Cat_Labelled
                ),
                fill = WaffleHouses_Cat # fill it with the Divorce_Cat variable
            ),
        ) + 
        theme_minimal() + # add this theme
        scale_fill_brewer(
            name = "Divorce rate", # make this the legend title
            wes_palette("Moonrise3") # add these color palettes
            ) + 
        labs( # adjust the labels to the plot
            x = "Divorce rate", # x-axis label
            y = "Waffle house?", # y-axis label
            caption = "Data source: Waffles dataset (McElreath 2020). Credit: damoncroberts.com" # caption
        )

waffle_cat %>% # take the waffle_cat dataset
    filter(Age_Cat == "28+") %>% # grab this age subset
    ggplot() + # make a plot object
        geom_mosaic( # specifically a mosaic plot
            aes( # for the axes 
                x = product( # on the x axis, plot the combination of the following variables
                    WaffleHouses_Cat,
                    Divorce_Cat_Labelled
                ),
                fill = WaffleHouses_Cat # fill it with the Divorce_Cat variable
            ),
        ) + 
        theme_minimal() + # add this theme
        scale_fill_brewer(
            name = "Divorce rate", # make this the legend title
            wes_palette("Moonrise3") # add these color palettes
            ) + 
        labs( # adjust the labels to the plot
            x = "Divorce rate", # x-axis label
            y = "Waffle House?", # y-axis label
            caption = "Data source: Waffles dataset (McElreath 2020). Credit: damoncroberts.com" # caption
        )
```

# Continuous data

Thankfully I have these data as continuous data instead. Let me look at the exact same hypotheses presented in @fig-simple-hypothesis and @fig-categorical-complicated-hypothesis.

Again, first I am going to try to understand each variable in isolation first.

```{r}
#| label: tbl-cont-descriptives-example
#| tbl-cap:  Descriptive statistics
#| echo: true
#| eval: false
waffle_cat %>% # grab the cleaned nes dataset from above
    select( # grab the following columns
        WaffleHouses,
        Age,
        Divorce,
    ) %>%
    datasummary_skim(
        data = ., # use the dataset linked with the pipe operators
        notes = "Data source: Waffles dataset McElreath(2020).", # provide a caption for the table
        output = "summary_stats_3.docx" # save the output to this file
    )
```

```{r}
#| label: tbl-cont-descriptives
#| tbl-cap: Descriptive statistics
#| echo: false
#| eval: true
waffle_cat %>% # grab the cleaned nes dataset from above
    select( # grab the following columns
        WaffleHouses,
        Age,
        Divorce
    ) %>%
    datasummary_skim(
        data = ., # use the dataset linked with the pipe operators
        notes = "Data source: Waffles dataset McElreath(2020).\n Credit: damoncroberts.com" # provide a caption for the table
    )
```

```{r}
#| label: fig-cont-histogram-example
#| fig-cap: Histograms of main variables
#| fig-subcap:
#|  - Waffle Houses
#|  - Age
#|  - Divorce
#| echo: true
#| eval: false
waffle_cat %>% # grab the waffles dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = WaffleHouses), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black" # make the lines of the bars black
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Waffle Houses", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020)" # add this note to the plot
    )

waffle_cat %>% # grab the waffles dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = Age), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color
        color = "black" # make the lines of the bars black
    ) +
    theme_minimal() + # apply the minimal theme to it
    labs(# change some labels
        y = "Count", # change the y axis label to this
        x = "Age", # change the x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020)" # add this note to the plot
    )

waffle_cat%>% # grab the waffles dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = Divorce), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black" # make the lines of the bars black
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Divorces", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020)" # add this note to the plot
    )
```


```{r}
#| label: fig-cont-histogram
#| fig-cap: Histograms of main variables
#| fig-subcap:
#|  - Waffle Houses
#|  - Age
#|  - Divorce
#| echo: false
#| eval: true
waffle_cat %>% # grab the nes_clean dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = WaffleHouses), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black", # make the lines of the bars black
        stat = "count"
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Waffle Houses", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020).\n Credit: damoncroberts.com" # add this note to the plot
    )

waffle_cat %>% # grab the nes_clean dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = Age), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black", # make the lines of the bars black
        stat = "count"
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Age", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020).\n Credit: damoncroberts.com" # add this note to the plot
    )

waffle_cat %>% # grab the nes_clean dataset
    ggplot() + # make a plot with these data
    geom_histogram( # specifically a histogram
        aes(x = Divorce), # put this column on the x-axis
        fill = "grey", # fill the bars with a grey color 
        color = "black", # make the lines of the bars black
        stat = "count"
    ) + 
    theme_minimal() + # apply the minimal theme to it
    labs( # change some labels
        y = "Count", # change y axis label to this
        x = "Divorce", # change x axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020).\n Credit: damoncroberts.com" # add this note to the plot
    )
```

Now, let me take advantage of a scatterplot to not only examine the relationship between the presence of waffle houses and divorce but conditional on age.

```{r}
#| label: fig-scatterplot-example
#| fig-cap: Scatterplot
#| echo: true
#| eval: false

waffle_cat %>% # grab the waffles dataset
    ggplot(
        data = .,
    ) + # make a ggplot object
    geom_point( # specifically a scatterplot
        aes(
            x = WaffleHouses, # put waffle houses on the x-axis
            y = Divorce, # put Divorce on the y-axis
            fill = Age_Cat, #fill the color of each dot by age
            color = Age_Cat #color the dots by age
            ),

    ) +
    scale_fill_brewer(
        name = "Age", # make this the legend title
        wes_palette("Moonrise3") # add these color palettes
    ) +
    theme_minimal() + # add the minimal theme
    labs( # adjust the labels
        x = "Number of waffle houses", # change x-axis label to this
        y = "Divorce", # change y-axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020)"
    )
```

```{r}
#| label: fig-scatterplot
#| fig-cap: Scatterplot
#| echo: false
#| eval: true

waffle_cat %>% # grab the waffles dataset
    ggplot(
        data = .,
    ) + # make a ggplot object
    geom_point( # specifically a scatterplot
        aes(
            x = WaffleHouses, # put waffle houses on the x-axis
            y = Divorce, # put Divorce on the y-axis
            fill = Age_Cat, #fill the color of each dot by age
            color = Age_Cat #color the dots by age
            ),

    ) +
    scale_fill_brewer(
        name = "Age", # make this the legend title
        wes_palette("Moonrise3") # add these color palettes
    ) +
    theme_minimal() + # add the minimal theme
    labs( # adjust the labels
        x = "Number of waffle houses", # change x-axis label to this
        y = "Divorce", # change y-axis label to this
        caption = "Data source: Waffles dataset (McElreath 2020).\n Credit: damoncroberts.com"
    )
```