---
title: "Population Distributions"
format:
  html:
    toc: false
    echo: false
    keep-hidden: true
    code-tools: true
---

In statistics, we use the phrase *population* to refer to the group of folks/organizations/countries we are interested in studying. The population does not necessarily imply that we are talking about all of the countries in the world or all of the citizens in a given jurisdiction. It really is just the group of interest. 

For example, say that I am interested in studying Black Americans' political attitudes on federal taxes. My population of interest would not include non-Black Americans. Another example would be that if I wanted to understand the voting intentions for American voters, my population does not include every American as there are a number of disenfranchised populations that are not allowed to vote. If I want to examine whether the EU decreased interstate conflict between those countries, I would not include countries outside of the EU in my analysis.

## Population distribution

```{python}
#| label: setup-block
# Import needed functions
import plotly.express as px # for making plotly histograms
import pandas as pd # for manipulating pd.DataFrame objects
# Import needed objects
from inference_data import population_N, population_data # to access population distribution data
# Convert to ojs object
ojs_define(population_data = population_data)
```

```{python}
#| label: print-N
#| output: asis
# Print calculated percentage of example
print("Let's try visualizing this. Say that we have identified a population that we are interested in studying that has {:.0f}".format(population_N) + " people in it (N = {:.0f}".format(population_N) +")")
```

Say we want to analyze three characteristics (variables) of observations in the population. [@fig-population-distribution] displays the distribution of our population if we *could* collect all of the data. In practice, this is often theoretical (based on our expertise). Meaning, we rarely are able to collect data on our full population.

```{ojs}
//| label: fig-population-distribution
//| fig-cap: Population Distributions
//| fig-subcap:
//|  - Normal distribution
//|  - Poisson distribution
//|  - Binomial distribution
Plot.plot({
    grid: true,
    marks: [
        Plot.frame(),
        Plot.rectY(
            transpose(population_data),
            Plot.binX(
                {y: "count"},
                {x: "data.normal",
                    fill:"#D3D3D3",
                    strokeWidth: 0.5,
                    stroke: "#000000",
                    thresholds: 10}
            ))
    ]
})
Plot.plot({
  grid: true,
  marks: [
    Plot.frame(),
    Plot.rectY(transpose(population_data), Plot.binX(
      {y: "count"},
      {x: "data.poisson",
       fill: "#D3D3D3",
       strokeWidth: .5, // linewidth = 0.5
       stroke: "#000000", // equivalent of edgecolor="black"
       thresholds: 10 // equivalent of "bins=10"
      }
    ))
  ]
})
Plot.plot({
  grid: true,
  marks: [
    Plot.frame(),
    Plot.rectY(transpose(population_data), Plot.binX(
      {y: "count"},
      {x: "data.binomial",
       fill: "#D3D3D3",
       strokeWidth: .5, // linewidth = 0.5
       stroke: "#000000", // equivalent of edgecolor="black"
       thresholds: 10 // equivalent of "bins=10"
      }
    ))
  ]
})
```

Just for our records, let's calculate the `mean` and the `standard deviation` of each variable for our population. Again, we are rarely ever able to actually do this.

```{python}
#| label: print-data.normal-n
#| output: asis
print(
    "Normal distribution variable mean: {:.0f}".format(population_data["data.normal"].mean()) + ", standard deviation: {:.0f}".format(population_data["data.normal"].std())
)
```

```{python}
#| label: print-data.poisson-n
#| output: asis
print(
    "Poisson distribution variable mean: {:.0f}".format(population_data["data.poisson"].mean()) + ", standard deviation: {:.0f}".format(population_data["data.poisson"].std()),
)
```

```{python}
#| label: print-data.binomial-n
#| output: asis
print(
    "Binomial distribution variable mean: {:.0f}".format(population_data["data.binomial"].mean()) + ", standard deviation: {:.0f}".format(population_data["data.binomial"].std())
)
```